name: ESP32 Build and Release (No Push)

on:
  push:
    branches: [ main ]
    paths:
      - 'sketch_jul3a/**'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Arduino CLI
      run: |
        # Download and install Arduino CLI
        wget https://github.com/arduino/arduino-cli/releases/download/v1.2.2/arduino-cli_1.2.2_Linux_64bit.tar.gz
        tar -xzf arduino-cli_1.2.2_Linux_64bit.tar.gz
        sudo mv arduino-cli /usr/local/bin/
        arduino-cli version
    
    - name: Setup Arduino CLI
      run: |
        # Initialize Arduino CLI
        arduino-cli config init
        
        # Update core index
        arduino-cli core update-index
        
        # Install ESP32 core
        arduino-cli core install esp32:esp32
        
        # Install required libraries
        arduino-cli lib install "TFT_eSPI"
        arduino-cli lib install "XPT2046_Touchscreen"
        arduino-cli lib install "ArduinoJson"
        
        # Show installed cores and libraries for debugging
        echo "Installed cores:"
        arduino-cli core list
        echo "Installed libraries:"
        arduino-cli lib list
    
    - name: Extract version from sketch
      id: version
      run: |
        # Extract version from sketch_jul3a.ino file
        VERSION=$(grep -o '#define FIRMWARE_VERSION "[^"]*"' sketch_jul3a/sketch_jul3a.ino | sed 's/#define FIRMWARE_VERSION "//' | sed 's/"//')
        
        if [ -z "$VERSION" ]; then
          echo "Error: Could not extract version from sketch_jul3a.ino"
          exit 1
        fi
        
        # Get short commit hash
        COMMIT_HASH=$(git rev-parse --short HEAD)
        
        echo "Found version in sketch: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
        echo "build_date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
    
    - name: Use version from sketch (no changes to sketch)
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "Using version from sketch: $VERSION"
        
        # Show the current FIRMWARE_VERSION line in the sketch
        echo "Current FIRMWARE_VERSION in sketch:"
        grep "FIRMWARE_VERSION" sketch_jul3a/sketch_jul3a.ino
        grep "FIRMWARE_VERSION" sketch_jul3a/sketch_jul3a.ino
    
    - name: Build firmware
      run: |
        # Create output directory
        mkdir -p build
        
        # Show sketch structure for debugging
        echo "Sketch structure:"
        ls -la sketch_jul3a/
        
        # Build the sketch
        echo "Building firmware..."
        arduino-cli compile --fqbn esp32:esp32:esp32 sketch_jul3a/sketch_jul3a.ino --output-dir build --verbose
        
        # Check if build was successful
        if [ -f "build/sketch_jul3a.ino.bin" ]; then
          echo "Build successful!"
          ls -la build/
          
          # Copy firmware to release directory
          mkdir -p release
          cp build/sketch_jul3a.ino.bin release/firmware.bin
          
          # Get firmware size
          FIRMWARE_SIZE=$(stat -c%s release/firmware.bin)
          echo "Firmware size: $FIRMWARE_SIZE bytes"
          
          # Check if firmware size is reasonable
          if [ $FIRMWARE_SIZE -gt 1500000 ]; then
            echo "Warning: Firmware size is quite large ($FIRMWARE_SIZE bytes)"
          fi
          
          # Save firmware size for later steps
          echo "firmware_size=$FIRMWARE_SIZE" >> $GITHUB_ENV
        else
          echo "Build failed! Looking for build artifacts..."
          find build -name "*.bin" -o -name "*.elf" -o -name "*.map" | head -10
          exit 1
        fi
    
    - name: Create version.json for release
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        COMMIT_HASH="${{ steps.version.outputs.commit_hash }}"
        BUILD_DATE="${{ steps.version.outputs.build_date }}"
        FIRMWARE_SIZE=$(stat -c%s release/firmware.bin)
        
        # Get commit message for release notes
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        
        # Create version.json for release
        cat > release/version.json << EOF
        {
          "version": "$VERSION",
          "firmware_url": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/firmware.bin",
          "release_notes": "$COMMIT_MSG",
          "min_version": "1.0.0",
          "force_update": false,
          "build_date": "$BUILD_DATE",
          "commit_hash": "$COMMIT_HASH",
          "firmware_size": $FIRMWARE_SIZE,
          "build_number": ${{ github.run_number }},
          "release_type": "automatic"
        }
        EOF
        
        echo "Created version.json for release:"
        cat release/version.json
    
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## ESP32 Home Assistant Thermostat - Version ${{ steps.version.outputs.version }}
          
          **Build Information:**
          - Version: ${{ steps.version.outputs.version }}
          - Commit: ${{ steps.version.outputs.commit_hash }}
          - Build Date: ${{ steps.version.outputs.build_date }}
          - Firmware Size: $(stat -c%s release/firmware.bin) bytes
          
          **Changes:**
          ${{ github.event.head_commit.message }}
          
          **OTA Update:**
          Devices configured with this release URL will automatically update.
          
          **Installation Instructions:**
          
          ### Method 1: Update your device's OTA URL (Recommended)
          Update your ESP32 code to use this release's firmware URL:
          ```cpp
          #define OTA_UPDATE_URL "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/version.json"
          #define OTA_FIRMWARE_URL "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/firmware.bin"
          ```
          
          ### Method 2: Manual Installation
          1. Download `firmware.bin` from the assets below
          2. Flash to your ESP32 using your preferred method
          
          **Configuration:**
          Make sure your SD card contains the required `config.json` and `ui_config.json` files.
          
          **Source Code:**
          The source code for this build is available in commit [${{ steps.version.outputs.commit_hash }}](https://github.com/${{ github.repository }}/commit/${{ steps.version.outputs.commit_hash }})
        files: |
          release/firmware.bin
          release/version.json
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build Summary
      run: |
        FIRMWARE_SIZE=$(stat -c%s release/firmware.bin)
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ steps.version.outputs.commit_hash }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date:** ${{ steps.version.outputs.build_date }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Firmware Size:** $FIRMWARE_SIZE bytes" >> $GITHUB_STEP_SUMMARY
        echo "- **Release URL:** https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Firmware URL:** https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/firmware.bin" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸš€ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… firmware.bin (compiled and released)" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… version.json (created for this release)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note:** This workflow creates releases without modifying the source repository." >> $GITHUB_STEP_SUMMARY
        echo "Each release has its own firmware and version.json files." >> $GITHUB_STEP_SUMMARY
